# Copyright (c) 2021-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("./../../miscdevice.gni")

ohos_shared_library("libmiscdevice_service") {
  sources = [
    "hdi_connection/adapter/src/hdi_connection.cpp",
    "hdi_connection/interface/src/light_hdi_connection.cpp",
    "hdi_connection/interface/src/vibrator_hdi_connection.cpp",
    "src/miscdevice_dump.cpp",
    "src/miscdevice_service.cpp",
    "src/miscdevice_service_stub.cpp",
    "src/vibration_priority_manager.cpp",
    "src/vibrator_thread.cpp",
  ]

  include_dirs = [
    "include",
    "$SUBSYSTEM_DIR/frameworks/native/common/include",
    "$SUBSYSTEM_DIR/interfaces/inner_api/light",
    "$SUBSYSTEM_DIR/services/miscdevice_service/hdi_connection/adapter/include",
    "$SUBSYSTEM_DIR/services/miscdevice_service/hdi_connection/interface/include",
    "$SUBSYSTEM_DIR/utils/include",
    "//third_party/cJSON",
  ]

  if (miscdevice_build_eng) {
    sources += [
      "hdi_connection/adapter/src/compatible_connection.cpp",
      "hdi_connection/adapter/src/compatible_light_connection.cpp",
    ]
  }

  cflags = [ "-Wno-error=inconsistent-missing-override" ]
  deps = [ "$SUBSYSTEM_DIR/utils:libmiscdevice_utils" ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "c_utils:utils",
    "drivers_interface_vibrator:libvibrator_proxy_1.1",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
  ]

  defines = miscdevice_default_defines

  if (miscdevice_feature_vibrator_custom) {
    sources += [
      "custom_vibrate_decode/src/custom_vibration_matcher.cpp",
      "custom_vibrate_decode/src/default_vibrator_decoder.cpp",
      "custom_vibrate_decode/src/default_vibrator_decoder_factory.cpp",
    ]
    include_dirs += [ "custom_vibrate_decode/include" ]
    external_deps += [ "init:libbegetutil" ]
  }

  if (hdf_drivers_interface_light) {
    sources += [ "hdi_connection/adapter/src/hdi_light_connection.cpp" ]

    external_deps += [ "drivers_interface_light:liblight_proxy_1.0" ]
  }

  shlib_type = "sa"
  part_name = "miscdevice"
  subsystem_name = "sensors"
}

#############################################################################
ohos_shared_library("libmiscdevice_service_static") {
  sources = [
    "hdi_connection/adapter/src/hdi_connection.cpp",
    "hdi_connection/interface/src/light_hdi_connection.cpp",
    "hdi_connection/interface/src/vibrator_hdi_connection.cpp",
    "src/miscdevice_dump.cpp",
    "src/miscdevice_service.cpp",
    "src/miscdevice_service_stub.cpp",
    "src/vibration_priority_manager.cpp",
    "src/vibrator_thread.cpp",
  ]

  include_dirs = [
    "include",
    "$SUBSYSTEM_DIR/frameworks/native/common/include",
    "$SUBSYSTEM_DIR/interfaces/inner_api/light",
    "$SUBSYSTEM_DIR/services/miscdevice_service/hdi_connection/adapter/include",
    "$SUBSYSTEM_DIR/services/miscdevice_service/hdi_connection/interface/include",
    "$SUBSYSTEM_DIR/utils/include",
    "//third_party/cJSON",
  ]
  
  if (miscdevice_build_eng) {
    sources += [
      "hdi_connection/adapter/src/compatible_connection.cpp",
      "hdi_connection/adapter/src/compatible_light_connection.cpp",
    ]
  }
  cflags = [ "-Wno-error=inconsistent-missing-override" ]
  deps = [ "$SUBSYSTEM_DIR/utils:libmiscdevice_utils" ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "c_utils:utils",
    "drivers_interface_vibrator:libvibrator_proxy_1.1",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
  ]

  defines = miscdevice_default_defines

  if (miscdevice_feature_vibrator_custom) {
    sources += [
      "custom_vibrate_decode/src/custom_vibration_matcher.cpp",
      "custom_vibrate_decode/src/default_vibrator_decoder.cpp",
      "custom_vibrate_decode/src/default_vibrator_decoder_factory.cpp",
    ]
    include_dirs += [ "custom_vibrate_decode/include" ]
    external_deps += [ "init:libbegetutil" ]
  }

  if (hdf_drivers_interface_light) {
    sources += [ "hdi_connection/adapter/src/hdi_light_connection.cpp" ]

    external_deps += [ "drivers_interface_light:liblight_proxy_1.0" ]
  }

  part_name = "miscdevice"
  subsystem_name = "sensors"
}

group("miscdevice_service_target") {
  deps = [
    ":libmiscdevice_service",
    ":libmiscdevice_service_static",
  ]
}
